%prefixes%

	terminal = tok_;
	function = p_;

%persistents%

	lex_state :lex_state;
	act_state :act_state;

%maps%

	string -> string;
	frame  -> frame;
	ast    -> ast;
	list   -> list;

%header% @{

	#include <assert.h>
	#include <stdio.h>

	#include "lex.h"
	#include "ast.h"
	#include "list.h"
	#include "frame.h"
	#include "parser.h"

	struct act_string {
		const char *s;
		const char *e;
	};

	struct act_state {
		struct lex_tok t;
		enum lex_type type, save;
		int (*dispatch)(struct ast *);
		struct frame *f;
	};

	typedef struct act_string string;
	typedef struct ast_list * list;

	#define CURRENT_TERMINAL act_state->type
	#define ERROR_TERMINAL   tok_error
	#define ADVANCE_LEXER    lex_next(lex_state, &act_state->t); \
							 act_state->type = act_state->t.type;
	#define SAVE_LEXER(tok)  act_state->save = tok;
	#define RESTORE_LEXER    act_state->type = act_state->save;

	static struct ast *
	binop(struct frame *f, enum ast_type type, struct ast *a, struct ast *b)
	{
		assert(f != NULL);

		if (a == NULL) {
			return b;
		}

		if (b == NULL) {
			return a;
		}

		return ast_new_op(f, type, a, b);
	}

@}, @{

	#include <stdio.h>

	typedef struct lex_state * lex_state;
	typedef struct act_state * act_state;
	typedef struct ast *       ast;

	int
	parse(struct lex_state *l,
		int (*dispatch)(struct ast *));

@};

%terminals%

	str: () -> (s :string) = @{
		assert(act_state->t.s != NULL);
		assert(act_state->t.e >= act_state->t.s);

		@s.s = act_state->t.s;
		@s.e = act_state->t.e;
	@};

%actions%

	<free>: (q :ast) -> () = @{
		assert(@q != NULL);

/* XXX:
		ast_free(@q);
*/
	@};

	<dispatch>: (q :ast) -> () = @{
		if (-1 == act_state->dispatch(@q)) {
			@!;
		}
	@};

	<epsilon>: () -> (q :ast) = @{
		@q = NULL;
	@};

	<frame-push>: () -> () = @{
		if (!frame_push(&act_state->f)) {
			@!;
		}
	@};

	<frame-pop>: () -> () = @{
		(void) frame_pop(&act_state->f);
	@};

	<new-str>: (s :string) -> (q :ast) = @{
		@q = ast_new_leaf(AST_STR, @s.e - @s.s, @s.s);
		if (@q == NULL) {
			@!;
		}
	@};

	<new-list>: (l :list) -> (q :ast) = @{
		@q = ast_new_list(@l);
		if (@q == NULL) {
			@!;
		}
	@};

	<block-frame>: (a :ast) -> (q :ast) = @{
		@q = ast_new_block(act_state->f, AST_BLOCK, @a);
		if (@q == NULL) {
			ast_free(@a);
			@!;
		}
	@};

	<block-setbg>: (a :ast) -> (q :ast) = @{
		@q = ast_new_block(act_state->f, AST_SETBG, @a);
		if (@q == NULL) {
			ast_free(@a);
			@!;
		}

		/* TODO: $% as jobid */
		if (!frame_set(act_state->f, "%", NULL)) {
			@!;
		}
	@};

	<block-exec>: (l :list) -> (q :ast) = @{
		assert(@l != NULL);

		@q = ast_new_exec(act_state->f, AST_EXEC, @l);
		if (@q == NULL) {
			/* TODO: free something? */
			@!;
		}
	@};

	<binop-and>: (a :ast, b :ast) -> (q :ast) = @{
		@q = binop(act_state->f, AST_AND, @a, @b);
		if (@q == NULL) {
			ast_free(@a);
			ast_free(@b);
			@!;
		}
	@};

	<binop-or>: (a :ast, b :ast) -> (q :ast) = @{
		@q = binop(act_state->f, AST_OR, @a, @b);
		if (@q == NULL) {
			ast_free(@a);
			ast_free(@b);
			@!;
		}
	@};

	<binop-join>: (a :ast, b :ast) -> (q :ast) = @{
		@q = binop(act_state->f, AST_JOIN, @a, @b);
		if (@q == NULL) {
			ast_free(@a);
			ast_free(@b);
			@!;
		}
	@};

	<binop-pipe>: (a :ast, b :ast) -> (q :ast) = @{
		@q = binop(act_state->f, AST_PIPE, @a, @b);
		if (@q == NULL) {
			ast_free(@a);
			ast_free(@b);
			@!;
		}
	@};

	<binop-assign>: (a :ast, b :ast) -> (q :ast) = @{
		@q = binop(act_state->f, AST_ASSIGN, @a, @b);
		if (@q == NULL) {
			ast_free(@a);
			ast_free(@b);
			@!;
		}
	@};

	<binop-sep>: (a :ast, b :ast) -> (q :ast) = @{
		@q = binop(act_state->f, AST_SEP, @a, @b);
		if (@q == NULL) {
			ast_free(@a);
			ast_free(@b);
			@!;
		}
	@};

	<list-null>: () -> (l :list) = @{
		@l = NULL;
	@};

	<list-cat>: (t :list, a :ast) -> (l :list) = @{
		@l = list_cat(@t, @a);
		if (@l == NULL) {
			/* TODO: free a? */
			@!;
		}
	@};

	<populate-globals>: () -> () = @{
		size_t i;

		struct {
			const char *name;
			struct ast *val;
		} a[] = {
			{ "?", NULL },
			{ "$", NULL }, /* TODO: getpid()  */
			{ "#", NULL }, /* TODO: from argc */
			{ "*", NULL }, /* TODO: from argv */
			{ "^", NULL }  /* TODO: "\t" */
		};

		for (i = 0; i < sizeof a / sizeof *a; i++) {
			if (!frame_set(act_state->f, a[i].name, a[i].val)) {
				@!;
			}
		}
	@};

%trailer% @{

	int
	parse(struct lex_state *lex_state,
		int (*dispatch)(struct ast *))
	{
		struct act_state a, *act_state = &a;

		assert(lex_state != NULL);
		assert(dispatch != NULL);

		act_state->dispatch = dispatch;
		act_state->f        = NULL;

		lex_state->p = lex_state->buf;

		ADVANCE_LEXER;  /* XXX: what if the first token is unrecognised? */

		/* TODO: handle raising an error or ## */
		p_script(lex_state, act_state);

		return 0;
	}

@}, @{

@};

