/*
 * Copyright 2013-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%prefixes%

	terminal = tok_;
	function = p_;

%persistents%

	lex_state :lex_state;
	act_state :act_state;

%maps%

	string -> string;
	opcode -> opcode;
	code   -> code;
	mark   -> mark;
	rule   -> rule;
	type   -> type;

%header% @{

	#include <assert.h>
	#include <limits.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <ctype.h>
	#include <errno.h>

	#include <unistd.h>

	#include "debug.h"
	#include "lex.h"
	#include "code.h"
	#include "parser.h"
	#include "err.h"

	enum err_state {
		ERR_NONE,
		ERR_SYNTAX,
		ERR_ERRNO
	};

	struct act_string {
		const char *s;
		const char *e;
	};

	struct act_state {
		struct lex_tok t;
		enum lex_type save;
		enum err_state e;
		int (*dispatch)(struct code *);
	};

	typedef struct act_string string;
	typedef enum opcode opcode;
	typedef struct code *code;
	typedef struct lex_mark *mark;
	typedef const char * rule;
	typedef enum lex_type type;

	#define CURRENT_TERMINAL act_state->t.type
	#define ERROR_TERMINAL   tok_error
	#define ADVANCE_LEXER    lex_next(lex_state, &act_state->t);
	#define SAVE_LEXER(type) act_state->save   = type;
	#define RESTORE_LEXER    act_state->t.type = act_state->save;

@}, @{

	#include <stdio.h>

	typedef struct lex_state * lex_state;
	typedef struct act_state * act_state;

	int
	parse(struct lex_state *l,
		int (*dispatch)(struct code *));

@};

%terminals%

	word: () -> (s :string) = @{
		assert(act_state->t.s != NULL);
		assert(act_state->t.e >= act_state->t.s);

		@s.s = act_state->t.s;
		@s.e = act_state->t.e;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "str: \"%.*s\"\n", (int) (@s.e - @s.s), @s.s);
		}
	@};

	var: () -> (s :string) = @{
		assert(act_state->t.s != NULL);
		assert(act_state->t.e >= act_state->t.s);

		@s.s = act_state->t.s;
		@s.e = act_state->t.e;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "var: \"%.*s\"\n", (int) (@s.e - @s.s), @s.s);
		}
	@};

	obrace: () -> (t :type, m :mark) = @{
		@m = lex_mark(lex_state->buf, act_state->t.pos);
		if (@m == NULL) {
			/* TODO: error out */
		}

		@t = act_state->t.type;
	@};

	oparen: () -> (t :type, m :mark) = @{
		@m = lex_mark(lex_state->buf, act_state->t.pos);
		if (@m == NULL) {
			/* TODO: error out */
		}

		@t = act_state->t.type;
	@};

	osquare: () -> (t :type, m :mark) = @{
		@m = lex_mark(lex_state->buf, act_state->t.pos);
		if (@m == NULL) {
			/* TODO: error out */
		}

		@t = act_state->t.type;
	@};

%actions%

	<dispatch>: (c :code &) -> () = @{
		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<dispatch>: ");
			code_dump(stderr, @c);
		}

		if (-1 == act_state->dispatch(@c)) {
			@!;
		}
	@};

	<empty-code>: () -> (c :code) = @{
		@c = NULL;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<empty-code>\n");
		}
	@};

	<stdin>:  () -> (s :string) = @{ @s.s = "0"; @s.e = @s.s + 1; @};
	<stdout>: () -> (s :string) = @{ @s.s = "1"; @s.e = @s.s + 1; @};
	<stderr>: () -> (s :string) = @{ @s.s = "2"; @s.e = @s.s + 1; @};

	<op-call>: () -> (op :opcode) = @{ @op = OP_CALL; @};
	<op-join>: () -> (op :opcode) = @{ @op = OP_JOIN; @};
	<op-not>:  () -> (op :opcode) = @{ @op = OP_NOT;  @};
	<op-null>: () -> (op :opcode) = @{ @op = OP_NULL; @};
	<op-run>:  () -> (op :opcode) = @{ @op = OP_RUN;  @};
	<op-tick>: () -> (op :opcode) = @{ @op = OP_TICK; @};
	<op-push>: () -> (op :opcode) = @{ @op = OP_PUSH; @};
	<op-pop>:  () -> (op :opcode) = @{ @op = OP_POP;  @};
	<op-clhs>: () -> (op :opcode) = @{ @op = OP_CLHS; @};
	<op-crhs>: () -> (op :opcode) = @{ @op = OP_CRHS; @};
	<op-ctck>: () -> (op :opcode) = @{ @op = OP_CTCK; @};

	<op-data>: () -> (op :opcode) = @{ @op = OP_DATA; @};
	<op-dup>:  () -> (op :opcode) = @{ @op = OP_DUP;  @};
	<op-asc>:  () -> (op :opcode) = @{ @op = OP_ASC;  @};
	<op-if>:   () -> (op :opcode) = @{ @op = OP_IF;   @};
	<op-pipe>: () -> (op :opcode) = @{ @op = OP_PIPE; @};
	<op-set>:  () -> (op :opcode) = @{ @op = OP_SET;  @};

	<code-anon>: (c :code &, op :opcode, ci :code) -> () = @{
		struct lex_mark m;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<code-anon>\n");
		}

		m.buf = lex_state->buf;
		m.pos = lex_state->pos;

		/* XXX: leak */
		if (!code_anon(@&c, &m, @op, @ci)) {
			@!;
		}
	@};

	<code-data>: (c :code &, s :string) -> () = @{
		struct lex_mark m;

		assert(@s.s != NULL && @s.e != NULL);
		assert(@s.e >= @s.s);

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<code-data>: \"%.*s\"\n", (int) (@s.e - @s.s), @s.s);
		}

		m.buf = lex_state->buf;
		m.pos = lex_state->pos;

		if (!code_data(@&c, &m, @s.e - @s.s, @s.s)) {
			@!;
		}
	@};

	<code-push>: (c :code &, op :opcode) -> () = @{
		struct lex_mark m;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<code-push>: %s\n", op_name(@op));
		}

		m.buf = lex_state->buf;
		m.pos = lex_state->pos;

		if (!code_push(@&c, &m, @op)) {
			@!;
		}
	@};

	<code-wind>: (c :code &, ci :code) -> () = @{
		struct code **tail;

		if (debug & DEBUG_ACT) {
			fprintf(stderr, "<code-wind>\n");
		}

		for (tail = @&ci; *tail != NULL; tail = &(*tail)->next)
			;

		*tail = @c;
		@=c = @ci;
	@};

	<expected-sep>:   () -> (r :rule) = @{ @r = "'\\n' | ';' | '&'"; @};
	<expected-pair>:  () -> (r :rule) = @{ @r = "m '=' n | m '=' | m | x '|' y"; @};
	<expected-value>: () -> (r :rule) = @{ @r = "$var | word | `word | `{ ... } | { ... } | ( ... )"; @};

	<err-expected>: (r :rule) -> () = @{
		assert(@r != NULL);

		if (act_state->e == ERR_NONE) {
			err_printf("syntax", lex_state->buf, &act_state->t.pos,
				"expected %s", @r);
			act_state->e = ERR_SYNTAX;
		}
	@};

	<err-unmatched>: (t :type, m :mark) -> () = @{
		assert((isprint)(@t));
		assert(@m != NULL);

		if (act_state->e == ERR_NONE) {
			err_printf("syntax", @m->buf, &@m->pos,
				"unmatched '%c'", (unsigned char) @t);
			act_state->e = ERR_SYNTAX;
		}
	@};

	<err-syntax> = @{
		if (act_state->e == ERR_NONE) {
			err_printf("syntax", lex_state->buf, &act_state->t.pos, NULL);
			act_state->e = ERR_SYNTAX;
		}

		if (act_state->e == ERR_ERRNO) {
			@!;
		}
	@};

	<free-mark>: (m :mark) -> () = @{
		free(@m);
	@};

%trailer% @{

	int
	parse(struct lex_state *lex_state,
		int (*dispatch)(struct code *))
	{
		struct act_state a, *act_state = &a;

		assert(lex_state != NULL);
		assert(dispatch != NULL);

		act_state->dispatch = dispatch;
		lex_state->p = lex_state->buf;

		do {
			act_state->e = ERR_NONE;

			ADVANCE_LEXER;

			p_script(lex_state, act_state);
			if (CURRENT_TERMINAL == @$error) {
				/* lexer error (e.g. fgets failing) */
				return -1;
			}

			if (act_state->e == ERR_ERRNO) {
				/* dispatch error */
				return -1;
			}

			if (act_state->e == ERR_SYNTAX) {
				if (debug & DEBUG_ACT) {
					fprintf(stderr, "<panic mode> ...\n");
				}

				/* panic mode */
				while (CURRENT_TERMINAL != @$semi && CURRENT_TERMINAL != @$nl) {
					ADVANCE_LEXER;
					if (CURRENT_TERMINAL == @$error) {
						return -1;
					}
				}

				if (debug & DEBUG_ACT) {
					fprintf(stderr, "... <end panic>\n");
				}
			}
		} while (act_state->e == ERR_SYNTAX);

		return 0;
	}

@}, @{

@};

