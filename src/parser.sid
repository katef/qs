/*
 * Copyright 2013-2017 Katherine Flavel
 *
 * See LICENCE for the full copyright terms.
 */

%types%

	string;
	opcode;
	code;
	mark;
	rule;
	type;

%terminals%

	!error;
	!panic;

	eof;
	nl;
	semi;
	!bg;
	equ;
	comma;
	!dot;
	tick;
	bar;
	or;
	and;
	!exec;

	obrace:  () -> (:type, :mark); cbrace;
	oparen:  () -> (:type, :mark); cparen;
	osquare: () -> (:type, :mark); csquare;

	word: () -> (:string);
	var:  () -> (:string);

%productions%

	<dispatch>: (:code &) -> ();

	<empty-code>: () -> (:code);

	<stdin>:  () -> (:string);
	!<stdout>:() -> (:string);
	!<stderr>:() -> (:string);

	<op-call>: () -> (:opcode);
	!<op-join>:() -> (:opcode);
	<op-not>:  () -> (:opcode);
	<op-null>: () -> (:opcode);
	<op-run>:  () -> (:opcode);
	<op-push>: () -> (:opcode);
	<op-pop>:  () -> (:opcode);
	<op-clhs>: () -> (:opcode);
	<op-crhs>: () -> (:opcode);
	<op-ctck>: () -> (:opcode);

	!<op-data>:() -> (:opcode);
	<op-dup>:  () -> (:opcode);
	<op-asc>:  () -> (:opcode);
	<op-if>:   () -> (:opcode);
	<op-pipe>: () -> (:opcode);
	<op-set>:  () -> (:opcode);
	<op-tick>: () -> (:opcode);

	<code-anon>: (:code &, :opcode, :code) -> ();
	<code-data>: (:code &, :string)        -> ();
	<code-push>: (:code &, :opcode)        -> ();
	<code-wind>: (:code &, :code)          -> ();

	<expected-sep>:   () -> (:rule);
	<expected-pair>:  () -> (:rule);
	<expected-value>: () -> (:rule);

	<err-expected>:  (:rule)        -> ();
	<err-unmatched>: (:type, :mark) -> ();
	<err-syntax>;

	<free-mark>: (:mark) -> ();

	block:     () -> (:code);
	expr-list: () -> (:code);

	concat: (a :code, b :code) -> (q :code) = {
		q = <empty-code>;

		<code-wind>(&q, b);
		<code-wind>(&q, a);
	};

	frame: (ci :code) -> (c :code) = {
		c = <empty-code>;

		o0 = <op-pop>;
		<code-push>(&c, o0);

		<code-wind>(&c, ci);

		o1 = <op-push>;
		<code-push>(&c, o1);
	};

	pipe: (lhs :code, rhs :code) -> (c :code) [

		side: (op :opcode, ci :code) -> (c :code) = {
			o0 = <op-dup>;

			<code-push>(&ci, o0);

			cx = <empty-code>;

			<code-push>(&cx, op);
			<code-wind>(&cx, ci);

			c = frame(cx);
		};

	] = {
		o1 = <op-clhs>;
		o2 = <op-crhs>;

		l = side(o1, lhs);
		c = side(o2, rhs);

		o0 = <op-pipe>;
		<code-anon>(&c, o0, l);
	};

	list: () -> (c :code) [

		::item: () -> (c :code) = {
			s = word;

			c = <empty-code>;
			<code-data>(&c, s);
		||
			s = var;

			c  = <empty-code>;
			op = <op-call>;
			<code-push>(&c, op);
			<code-data>(&c, s);
		||
			tick;

			/* tick command */
			{
				cx = item;

				ci = <empty-code>;

				o1 = <op-run>;
				<code-push>(&ci, o1);

				<code-wind>(&ci, cx);

				o0 = <op-null>;
				<code-push>(&ci, o0);
			||
				ci = block;
			};

			{
				lhs = <empty-code>;

				o4 = <op-ctck>;
				<code-push>(&lhs, o4);

				<code-wind>(&lhs, ci);
			};

			{
				rhs = <empty-code>;

				o3 = <op-tick>;
				<code-push>(&rhs, o3);
			};

			c = pipe(lhs, rhs);
		};

	] = {
		c = item;

		{
			ci = list;
			<code-wind>(&c, ci);
		||
			$;
		};
	};

	assign-expr: () -> (c :code) [

		value: () -> (c :code) = {
			(t, m) = oparen;

			c = list;
			{
				cparen;
			##
				<err-unmatched>(t, m);
			};

			<free-mark>(m);
		||
			c = item;
		||
			c = block;
		##
			c = <empty-code>;
			r = <expected-value>;
			<err-expected>(r);
		};

	] = {
		s = word;
		equ;
		ci = value;

		c = <empty-code>;

		op = <op-set>;
		<code-anon>(&c, op, ci);

		<code-data>(&c, s);
	};

	block: () -> (c :code) = {
		(t, m) = obrace;

		{
			c = expr-list;
		||
			c = <empty-code>;
		};

		{
			cbrace;
		##
			<err-unmatched>(t, m);
		};

		<free-mark>(m);
	};

	command: () -> (c :code) = {
		cx = list;

		c = <empty-code>;

		o0 = <op-run>;
		<code-push>(&c, o0);

		<code-wind>(&c, cx);

		o1 = <op-null>;
		<code-push>(&c, o1);
	};

	dup-expr: () -> (c :code) [

		/* here I would use zones if the lexer supported it, and emit tok_fd */
		fd: () -> (c :code) = {
			s = word;

			c = <empty-code>;
			<code-data>(&c, s);
		||
			s = var;

			c  = <empty-code>;
			op = <op-call>;
			<code-push>(&c, op);
			<code-data>(&c, s);
		};

		close: () -> (c :code) = {
			c  = <empty-code>;
			op = <op-null>;
			<code-push>(&c, op);
		};

		default: () -> (c :code) = {
			c = <empty-code>;
			s = <stdin>;
			<code-data>(&c, s);
		};

		dup-pair: () -> (old :code, new :code) = {
			old = fd;
			equ;
			new = fd;
		||
			old = fd;
			equ;
			new = close;
		||
			old = fd;
			new = default;
		};

		asc-pair: () -> (lhs :code, rhs :code) = {
			lhs = fd;
			bar;
			rhs = fd;
		};

		pair-list: () -> (c :code) = {
			{
				(m, n) = dup-pair;
				o0 = <op-dup>;
			||
				(m, n) = asc-pair;
				o0 = <op-asc>;
			};

			{
				comma;
				c = pair-list;
			||
				c = <empty-code>;
			};

			/*
			 * Because we recurr leftmost, the pair list is pushed after parse,
			 * so that latter pairs may evaluate to overwrite previous pairs.
			 */

			<code-push>(&c, o0);

			<code-wind>(&c, m);
			<code-wind>(&c, n);

			o1 = <op-null>;
			<code-push>(&c, o1);
		##
			c = <empty-code>;
			r = <expected-pair>;
			<err-expected>(r);
		};

		pair-box: () -> (c :code) = {
			(t, m) = osquare;

			dx = pair-list;
			{
				csquare;
			##
				<err-unmatched>(t, m);
			};

			<free-mark>(m);

			c = <empty-code>;

			<code-wind>(&c, dx);
		};

	] = {
		cx = block;

		/*
		 * Here we need a frame for the block regardless of whether
		 * there is a redir list present. If there is a redir list then
		 * the block's frame is used to hold it. Otherwise, a frame
		 * is pushed anyway for scoping (with an empty dup and asc list).
		 */
		{
			d = pair-box;
			q = concat(d, cx);
			c = frame(q);
		||
			d = <empty-code>;
			q = concat(d, cx);
			c = frame(q);
		};
	||
		cx = command;

		/*
		 * Here we only push a frame if there is a dup list to hold.
		 */
		{
			d = pair-box;
			q = concat(d, cx);
			c = frame(q);
		||
			c = cx;
		};
	};

	pipe-expr: () -> (c :code) = {
		cx = dup-expr;

		{
			bar;

			rhs = pipe-expr;
			lhs = cx;

			c = pipe(lhs, rhs);
		||
			c = cx;
		};
	};

	and-expr: () -> (c :code) = {
		{
			cx = pipe-expr;
		||
			cx = assign-expr;
		};

		{
			and;

			ci = and-expr;

			c = <empty-code>;

			o2 = <op-if>;
			<code-anon>(&c, o2, ci);

			<code-wind>(&c, cx);
		||
			c = cx;
		};
	};

	or-expr: () -> (c :code) = {
		cx = and-expr;

		{
			or;

			ci = or-expr;

			c = <empty-code>;

			o2 = <op-if>;
			<code-anon>(&c, o2, ci);

			o1 = <op-not>;
			<code-push>(&c, o1);

			<code-wind>(&c, cx);
		||
			c = cx;
		};
	};

	expr-list: () -> (c :code) [

		::sep = {
			nl;
		||
			semi;
		##
			r = <expected-sep>;
			<err-expected>(r);
		};

		::expr: () -> (c :code) = {
			c = or-expr;
		##
			c = <empty-code>;
			<err-syntax>;
		};

	] = {
		cx = expr;

		{
			sep;

			c = expr-list;

			<code-wind>(&c, cx);
		||
			sep;
			c = cx;
		||
			c = cx;
		};
	};

	script [

		global-expr-list: () -> () = {
			{
				c = expr;
			||
				c = <empty-code>;
			};

			sep;

			<dispatch>(&c);

			{
				global-expr-list;
			||
				$;
			};
		};

	] = {

		{
			global-expr-list;
		||
			$;
		};

		eof;

	};

%entry%

	script;

