%types%

	string;
	!frame;
	type;
	code;
	dup;
	fd;

%terminals%

	!error;
	!panic;

	eof;
	nl;
	semi;
	bg;
	equ;
	comma;
	!dot;
	tick;
	bar;
	obrace;  cbrace;
	oparen;  cparen;
	osquare; csquare;
	or;
	and;
	!exec;

	word: () -> (:string);
	var:  () -> (:string);

%productions%

	<dispatch>: (:code &) -> ();

	<var-top>:  () -> (:string);

	<empty-code>: () -> (:code);
	<empty-dup>:  () -> (:dup);

	<stdin>:  () -> (:fd);
	!<stdout>:() -> (:fd);
	!<stderr>:() -> (:fd);

	<type-null>: () -> (:type);
	<type-anon>: () -> (:type);
	<type-ret>:  () -> (:type);
	<type-pipe>: () -> (:type);
	<type-not>:  () -> (:type);
	<type-tick>: () -> (:type);
	<type-call>: () -> (:type);
	<type-exec>: () -> (:type);
	<type-if>:   () -> (:type);
	!<type-join>:() -> (:type);
	<type-set>:  () -> (:type);

	<make-fd>:  (:string) -> (:fd);
	<make-dup>: (:dup &, :fd, :fd) -> ();

	<prepend-anon>: (:code &, :type, :code) -> ();
	<prepend-data>: (:code &, :string)      -> ();
	<prepend-code>: (:code &, :type)        -> ();

	<append-anon>:  (:code &, :type, :code) -> ();
	<append-data>:  (:code &, :string)      -> ();
	<append-dup>:   (:code &, :dup)         -> ();
	<append-code>:  (:code &, :type)        -> ();
	<append-cat>:   (:code &, :code)        -> ();

	<frame-push>;
	<frame-pop>;
	<frame-set>: (:string, :code) -> ();

	<err-expected-sep>;
	<err-syntax>: (:code) -> ();

	tick-value: (:code &) -> ();
	block:      (:code &) -> ();
	expr-list:  (:code &) -> ();

	dup-box: (c :code &) -> () [

		/* here I would use zones if the lexer supported it, and emit tok_fd */
		/* TODO: [n=] to close an fd */
		dup-item: () -> (l :fd, r :fd) = {
			n = word;
			equ;
			m = word;

			l = <make-fd>(n);
			r = <make-fd>(m);
		||
			n = word;

			l = <make-fd>(n);
			r = <stdin>;
		};

		dup-list: (d :dup &) -> () = {
			(l, r) = dup-item;
			<make-dup>(&d, l, r);

			{
				comma;
				dup-list(&d);
			||
				$;
			};
		};

	] = {
		di = <empty-dup>;

		osquare;
		dup-list(&di);
		csquare;

		<append-dup>(&c, di);
	};

	word-list: (c :code &) -> () [

		::word-item: (c :code &) -> () = {
			s = word;
			<prepend-data>(&c, s);
		||
			t = <type-call>;
			<prepend-code>(&c, t);

			s = var;
			<prepend-data>(&c, s);
		};

	] = {
		{
			word-item(&c);
		||
			tick-value(&c);
		};

		{
			word-list(&c);
		||
			$;
		};
	};

	assign-expr: (c :code &) -> () [

		::value: (c :code &) -> () = {
			oparen;
			word-list(&c);
			cparen;
		||
			block(&c);
		||
			word-item(&c);
		};

		::tick-value: (c :code &) -> () = {
			tick;

			t2 = <type-null>;
			<prepend-code>(&c, t2);

			{
				word-item(&c);
			||
				ci = <empty-code>;

				block(&ci);

				t0 = <type-ret>;
				<append-code>(&ci, t0);

				/* TODO: get rid of #anon and have #tick take @ci here */
				t3 = <type-anon>;
				<prepend-anon>(&c, t3, ci);

				/* XXX: would need to set up pipe for ` here, first. inner #exec are not dup2'd */
				/* XXX: maybe best to have #exec take a u.pipe argument for dup2 */
			};

			t1 = <type-tick>;
			<prepend-code>(&c, t1);
		};

	] = {
		s = word;
		equ;

		ci = <empty-code>;

		{
			value(&ci);
		||
			tick-value(&ci);
		};

		t0 = <type-ret>;
		<append-code>(&ci, t0);

		<append-data>(&c, s);

		t1 = <type-set>;
		<append-anon>(&c, t1, ci);
	};

	block-expr: (c :code &) -> () [

		::block: (c :code &) -> () = {
			obrace;
			<frame-push>;
			{
				expr-list(&c);
			||
				$;
			};
			<frame-pop>;
			cbrace;
		};

	] = {
		ci = <empty-code>;

		/*
		 * SID's parsing has single-token lookahead. This has the effect that
		 * actions must come before disambiguating the next token. Because LL(1)
		 * parsing does not permit leftmost recursion, the <stack-push> actions
		 * must be called after recurring - i.e. in reverse order.
TODO: update comment:
		 * So <prepend-stack> is expected to wind instructions in reverse order,
		 * to counter that &ci is constructed backwards.
		 */

		word-list(&ci);

		t0 = <type-null>;
		<prepend-code>(&ci, t0);

		t1 = <type-exec>;
		<append-code>(&ci, t1);

		<append-cat>(&c, ci);
	||
		block(&c);
	};

	dup-expr: (c :code &) -> () = {
		block-expr(&c);

		{
			dup-box(&c);
		||
			$;
		};
	};

	pipe-expr: (c :code &) -> () = {
		dup-expr(&c);

		{
			bar;

			ci = <empty-code>;

			t0 = <type-pipe>;
			<append-code>(&ci, t0);

			/* TODO: maybe no need to append-cat here; could just pass &ci directly to pipe-expr() */
			<append-cat>(&c, ci);
			/* TODO: pipe needs an #anon block or something, to hold the rhs */

			cii = <empty-code>;
			pipe-expr(&cii);

			<append-cat>(&ci, cii);
		||
			$;
		};
	};

	and-expr: (c :code &) -> () = {
		{
			pipe-expr(&c);
		||
			! = <empty-code>; /* XXX: hack to keep SID happy */
			assign-expr(&c);
		};

		{
			and;

			ci = <empty-code>;
			and-expr(&ci);

			t0 = <type-ret>;
			<append-code>(&ci, t0);

			t2 = <type-if>;
			<append-anon>(&c, t2, ci);
		||
			$;
		};
	};

	or-expr: (c :code &) -> () = {
		and-expr(&c);

		{
			or;

			ci = <empty-code>;
			or-expr(&ci);

			t0 = <type-ret>;
			<append-code>(&ci, t0);

			t1 = <type-not>;
			<append-code>(&c, t1);

			t2 = <type-if>;
			<append-anon>(&c, t2, ci);
		||
			$;
		};
	};

	expr-list: (c :code &) -> () [

		::sep = {
			nl;
		||
			semi;
		||
			bg;
			/* TODO: <code-bg>(c); and set $% as jobid */
		##
			<err-expected-sep>;
		};

		::expr: (c :code &) -> () = {
			or-expr(&c);
		##
			<err-syntax>(c);
		};

	] = {
		expr(&c);

		{
			sep;

			ci = <empty-code>;
			expr-list(&ci);

			<append-cat>(&c, ci);
		||
			sep;
		||
			$;
		};
	};

	script [

		global-expr-list = {
			c = <empty-code>;

			expr(&c);
			sep;

			<dispatch>(&c);

			s = <var-top>;
			<frame-set>(s, c);

			{
				global-expr-list;
			||
				$;
			};
		};

	] = {
		<frame-push>;
		{
			global-expr-list;
		||
			$;
		};
		<frame-pop>;

		eof;
	};

%entry%

	script;

