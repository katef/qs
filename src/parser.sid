%types%

	string;
	!scope;
	ast;

%terminals%

	!error;
	!panic;

	eof;
	nl;
	semi;
	bg;
	equ;
	!dot;
	!back;
	!var;
	pipe;
	obrace;
	cbrace;
	oparen;
	cparen;
	or;
	and;
	!exec;

	str: () -> (:string);

%productions%

	<free>:     (:ast) -> ();
	<dispatch>: (:ast) -> ();

	<epsilon>: () -> (:ast);

    <scope-push>;
    <scope-pop>;

	<new-str>: (:string) -> (:ast);

	/* TODO: call these <frame-*> perhaps */
	<block-scope>: (:ast) -> (:ast);
	<block-runfg>: (:ast) -> (:ast);
	<block-runbg>: (:ast) -> (:ast);

	<binop-and>:    (:ast, :ast) -> (:ast);
	<binop-or>:     (:ast, :ast) -> (:ast);
	!<binop-join>:  (:ast, :ast) -> (:ast);
	<binop-pipe>:   (:ast, :ast) -> (:ast);
	<binop-assign>: (:ast, :ast) -> (:ast);
	<binop-sep>:    (:ast, :ast) -> (:ast);
	<binop-cons>:   (:ast, :ast) -> (:ast);

	<populate-globals>;

	exprs: () -> (:ast);

	list: () -> (q :ast) [

		term: () -> (q :ast) = {
			s = str;
			q = <new-str>(s);
		};

	] = {
		a = term;

		{
			b = list;
		||
			b = <epsilon>;
		};

		q = <binop-cons>(a, b);
	};

	cmd: () -> (q :ast) = {
		q = list;
	||
		obrace;
		<scope-push>;
		a = exprs;
		q = <block-scope>(a);
		<scope-pop>;
		cbrace;
	||
		oparen;
		q = exprs;
		cparen;
	};

/* XXX: needs different grammar */
	assign-expr: () -> (q :ast) = {
		a = cmd;

		{
			equ;
			b = assign-expr;
		||
			b = <epsilon>;
		};

		q = <binop-assign>(a, b);
	};

	pipe-expr: () -> (q :ast) = {
		a = assign-expr;

		{
			pipe;
			b = pipe-expr;
		||
			b = <epsilon>;
		};

		q = <binop-pipe>(a, b);
	};

	and-expr: () -> (q :ast) = {
		a = pipe-expr;

		{
			and;
			b = and-expr;
		||
			b = <epsilon>;
		};

		q = <binop-and>(a, b);
	};

	or-expr: () -> (q :ast) = {
		a = and-expr;

		{
			or;
			b = or-expr;
		||
			b = <epsilon>;
		};

		q = <binop-or>(a, b);
	};

	exprs: () -> (q :ast) [

		::expr: () -> (q :ast) = {
			a = or-expr;

			/* for $? */
			<scope-push>;

			{
				nl;
				q = <block-runfg>(a);
			||
				semi;
				q = <block-runfg>(a);
			||
				bg;
				q = <block-runbg>(a);
			};

			<scope-pop>;

		||
			q = <epsilon>;
			nl;
		||
			q = <epsilon>;
			semi;
		};

	] = {
		a = expr;

		{
			b = exprs;
		||
			b = <epsilon>;
		};

		q = <binop-sep>(a, b);
	};

	script [

		global-exprs = {
			a = expr;

			q = <block-scope>(a);

			<dispatch>(q);
			<free>(q);

			{
				global-exprs;
			||
				$;
			};
		};

	] = {
		<scope-push>;
		<populate-globals>;
		global-exprs;
		<scope-pop>;

		eof;
	};

%entry%

	script;

