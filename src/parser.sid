%types%

	string;
	!frame;
	type;
	code;
	dup;
	fd;

%terminals%

	!error;
	!panic;

	eof;
	nl;
	semi;
	bg;
	equ;
	comma;
	!dot;
	tick;
	bar;
	obrace;  cbrace;
	oparen;  cparen;
	osquare; csquare;
	or;
	and;
	!exec;

	word: () -> (:string);
	var:  () -> (:string);

%productions%

	<dispatch>: (:code &) -> ();

	<var-top>:  () -> (:string);

	<empty-code>: () -> (:code);
	<empty-dup>:  () -> (:dup);

	<stdin>:  () -> (:fd);
	!<stdout>:() -> (:fd);
	!<stderr>:() -> (:fd);

	<type-null>: () -> (:type);
	<type-anon>: () -> (:type);
	<type-ret>:  () -> (:type);
	<type-pipe>: () -> (:type);
	<type-not>:  () -> (:type);
	<type-tick>: () -> (:type);
	<type-call>: () -> (:type);
	<type-exec>: () -> (:type);
	<type-if>:   () -> (:type);
	!<type-join>:() -> (:type);
	<type-set>:  () -> (:type);

	<make-fd>:  (:string) -> (:fd);
	<make-dup>: (:dup &, :fd, :fd) -> ();

	<prepend-anon>: (:code &, :type, :code) -> ();
	<prepend-data>: (:code &, :string)      -> ();
	<prepend-code>: (:code &, :type)        -> ();
	<prepend-cat>:  (:code &, :code)        -> ();

	<append-anon>:  (:code &, :type, :code) -> ();
	<append-data>:  (:code &, :string)      -> ();
	<append-dup>:   (:code &, :dup)         -> ();
	<append-code>:  (:code &, :type)        -> ();
	<append-cat>:   (:code &, :code)        -> ();

	<frame-push>;
	<frame-pop>;
	<frame-set>: (:string, :code) -> ();

	<err-expected-sep>;
	<err-syntax>: (:code) -> ();

	tick-value: () -> (:code);
	block:      () -> (:code);
	expr-list:  () -> (:code);

	dup-box: () -> (d :dup) [

		/* here I would use zones if the lexer supported it, and emit tok_fd */
		/* TODO: [n=] to close an fd */
		dup-item: () -> (l :fd, r :fd) = {
			n = word;
			equ;
			m = word;

			l = <make-fd>(n);
			r = <make-fd>(m);
		||
			n = word;

			l = <make-fd>(n);
			r = <stdin>;
		};

		dup-list: (d :dup &) -> () = {
			(l, r) = dup-item;
			<make-dup>(&d, l, r);

			{
				comma;
				dup-list(&d);
			||
				$;
			};
		};

	] = {
		osquare;
		d = <empty-dup>;
		dup-list(&d);
		csquare;
	};

	word-list: () -> (c :code) [

		::word-item: () -> (c :code) = {
			s = word;
			c = <empty-code>;
			<prepend-data>(&c, s);
		||
			s = var;
			c = <empty-code>;
			t = <type-call>;
			<prepend-code>(&c, t);
			<prepend-data>(&c, s);
		};

	] = {
		{
			c = word-item;
		||
			c = tick-value;
		};

		{
			ci = word-list;
			<prepend-cat>(&c, ci);
		||
			$;
		};
	};

	assign-expr: () -> (c :code) [

		::value: () -> (c :code) = {
			oparen;
			c = word-list;
			cparen;
		||
			c = block;
		||
			c = word-item;
		};

		::tick-value: () -> (c :code) = {
			tick;

			c = <empty-code>;
/* XXX: probably not going to work, due to SID stuff. maybe take x = &c here, and return x.
or <append-*> need to return the new :code */
/* TODO: make #tick take @ci, and the inner block just calls #exec */

			t1 = <type-tick>;
			<prepend-code>(&c, t1);

			{
				ci = word-item;
				<prepend-cat>(&c, ci);
			||
				ci = block;

				t0 = <type-ret>;
				<append-code>(&ci, t0);

				/* TODO: get rid of #anon and have #tick take @ci here */
				t3 = <type-anon>;
				<prepend-anon>(&c, t3, ci);

				/* XXX: would need to set up pipe for ` here, first. inner #exec are not dup2'd */
				/* XXX: maybe best to have #exec take a u.pipe argument for dup2 */
			};

			t2 = <type-null>;
			<prepend-code>(&c, t2);
		};

	] = {
		s = word;
		equ;

		/* TODO: maybe prepend this, after, and just have c = value/tick-value */
		c = <empty-code>;
		<append-data>(&c, s);

		{
			ci = value;
		||
			ci = tick-value;
		};

		t0 = <type-ret>;
		<append-code>(&ci, t0);

		t1 = <type-set>;
		<append-anon>(&c, t1, ci);
	};

	block-expr: () -> (c :code) [

		::block: () -> (c :code) = {
			obrace;
			<frame-push>;
			{
				c = expr-list;
			||
				c = <empty-code>;
			};
			<frame-pop>;
			cbrace;
		};

	] = {
		c = word-list;

		t0 = <type-null>;
		<prepend-code>(&c, t0);

		t1 = <type-exec>;
		<append-code>(&c, t1);
	||
		c = block;
	};

	dup-expr: () -> (c :code) = {
		c = block-expr;

		{
			d = dup-box;
			<append-dup>(&c, d);
		||
			$;
		};
	};

	pipe-expr: () -> (c :code) = {
		c = dup-expr;

		{
			bar;

			ci = <empty-code>;

			t0 = <type-pipe>;
			<append-code>(&ci, t0);

			/* TODO: maybe no need to append-cat here; could just pass &ci directly to pipe-expr() */
			<append-cat>(&c, ci);
			/* TODO: pipe needs an #anon block or something, to hold the rhs */

			cii = pipe-expr;

			<append-cat>(&ci, cii);
		||
			$;
		};
	};

	and-expr: () -> (c :code) = {
		{
			c = pipe-expr;
		||
			c = assign-expr;
		};

		{
			and;

			ci = and-expr;

			t0 = <type-ret>;
			<append-code>(&ci, t0);

			t2 = <type-if>;
			<append-anon>(&c, t2, ci);
		||
			$;
		};
	};

	or-expr: () -> (c :code) = {
		c = and-expr;

		{
			or;

			ci = or-expr;

			t0 = <type-ret>;
			<append-code>(&ci, t0);

			t1 = <type-not>;
			<append-code>(&c, t1);

			t2 = <type-if>;
			<append-anon>(&c, t2, ci);
		||
			$;
		};
	};

	expr-list: () -> (c :code) [

		::sep = {
			nl;
		||
			semi;
		||
			bg;
			/* TODO: <code-bg>(c); and set $% as jobid */
		##
			<err-expected-sep>;
		};

		::expr: () -> (c :code) = {
			c = or-expr;
		##
			c = <empty-code>;
			<err-syntax>(c);
		};

	] = {
		c = expr;

		{
			sep;

			ci = expr-list;

			<append-cat>(&c, ci);
		||
			sep;
		||
			$;
		};
	};

	script [

		global-expr-list = {
			c = expr;
			sep;

			<dispatch>(&c);

			s = <var-top>;
			<frame-set>(s, c);

			{
				global-expr-list;
			||
				$;
			};
		};

	] = {
		<frame-push>;
		{
			global-expr-list;
		||
			$;
		};
		<frame-pop>;

		eof;
	};

%entry%

	script;

