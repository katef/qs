%types%

	string;
	!frame;
	type;
	code;

%terminals%

	!error;
	!panic;

	eof;
	nl;
	semi;
	bg;
	equ;
	!dot;
	!back;
	pipe;
	obrace;
	cbrace;
	oparen;
	cparen;
	or;
	and;
	!exec;

	str: () -> (:string);
	var: () -> (:string);

%productions%

	<dispatch>: (:code &) -> ();
	<populate>;

	<var-top>:  () -> (:string);

	<empty>: () -> (:code);

	<type-null>: () -> (:type);
	<type-not>:  () -> (:type);
	<type-call>: () -> (:type);
	<type-exec>: () -> (:type);
	<type-if>:   () -> (:type);
	!<type-join>:() -> (:type);
	<type-pipe>: () -> (:type);
	<type-set>:  () -> (:type);

	<push-anon>: (:code &, :code)   -> ();
	<push-data>: (:code &, :string) -> ();
	<push-code>: (:code &, :type)   -> ();
	<push-stack>:(:code &, :code)   -> ();

	<frame-push>;
	<frame-pop>;
	<frame-set>: (:string, :code) -> ();

	<err-expected-sep>;
	<err-syntax>: (:code) -> ();

	exprs: (:code &) -> ();

	arg: (c :code &) -> () = {
	/* TODO: || backtick */
		s = str;
		<push-data>(&c, s);
	||
		s = var;
		t = <type-call>;
		<push-code>(&c, t);
		<push-data>(&c, s);
	};

	list: (c :code &) -> () = {
		arg(&c);

		{
			list(&c);
		||
			t = <type-null>;
			<push-code>(&c, t);
		};
	};

	assign-expr: (c :code &) -> () [

		block: (c :code &) -> () = {
			obrace;
			<frame-push>;
			{
				exprs(&c);
			||
				$;
			};
			<frame-pop>;
			cbrace;
		};

		value: (c :code &) -> () = {
			oparen;
			list(&c);
			cparen;
		||
			block(&c);
		||
			arg(&c);
		};

	] = {
		ci = <empty>;

		/*
		 * SID's parsing has single-token lookahead. This has the effect that
		 * actions must come before disambiguating the next token. Because LL(1)
		 * parsing does not permit leftmost recursion, the <stack-push> actions
		 * must be called after recurring - i.e. in reverse order.
		 * So <push-stack> is expected to wind instructions in reverse order,
		 * to counter that &ci is constructed backwards.
		 */

		{
			list(&ci);
			<push-stack>(&c, ci);
			t = <type-exec>;
			<push-code>(&c, t);
		||
			block(&c);
		||
			s = str;
			equ;
			value(&ci);

			<push-data>(&c, s);

			t = <type-set>;
			<push-code>(&c, t);

			<push-anon>(&c, ci);
		};
	};

	pipe-expr: (c :code &) -> () = {
		assign-expr(&c);

		{
			pipe;
			pipe-expr(&c);
			t = <type-pipe>;
			<push-code>(&c, t);
		||
			$;
		};
	};

	and-expr: (c :code &) -> () = {
		pipe-expr(&c);

		{
			and;

			t = <type-if>;
			<push-code>(&c, t);

			ci = <empty>;
			and-expr(&ci);
			<push-anon>(&c, ci);
		||
			$;
		};
	};

	or-expr: (c :code &) -> () = {
		and-expr(&c);

		{
			or;

			t1 = <type-not>;
			<push-code>(&c, t1);

			t2 = <type-if>;
			<push-code>(&c, t2);

			ci = <empty>;
			or-expr(&ci);
			<push-anon>(&c, ci);
		||
			$;
		};
	};

	exprs: (c :code &) -> () [

		::sep = {
			nl;
		||
			semi;
		||
			bg;
			/* TODO: <code-bg>(c); and set $% as jobid */
		##
			<err-expected-sep>;
		};

		::expr: (c :code &) -> () = {
			or-expr(&c);
		##
			<err-syntax>(c);
		};

	] = {
		expr(&c);

		{
			sep;
			exprs(&c);
		||
			sep;
		||
			$;
		};
	};

	script [

		global-exprs = {
			c = <empty>;

			expr(&c);
			sep;

			<dispatch>(&c);

			s = <var-top>;
			<frame-set>(s, c);

			{
				global-exprs;
			||
				$;
			};
		};

	] = {
		<frame-push>;
		<populate>;
		{
			global-exprs;
		||
			$;
		};
		<frame-pop>;

		eof;
	};

%entry%

	script;

