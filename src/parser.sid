%types%

	string;
	bet;

%terminals%

	!error;
	!panic;

	eof;
	nl;
	semi;
	bg;
	equ;
	!dot;
	!back;
	var;
	pipe;
	obrace;
	cbrace;
	oparen;
	cparen;
	or;
	and;
	!exec;

	str: () -> (:string);

%productions%

	<new-str>: (:string) -> (:bet);
	<new-var>: (:string) -> (:bet);

	<binop-and>:    (:bet, :bet) -> (:bet);
	<binop-or>:     (:bet, :bet) -> (:bet);
	!<binop-join>:  (:bet, :bet) -> (:bet);
	<binop-pipe>:   (:bet, :bet) -> (:bet);
	<binop-assign>: (:bet, :bet) -> (:bet);
	<binop-exec>:   (:bet, :bet) -> (:bet);
	<binop-bg>:     (:bet, :bet) -> (:bet);
	<binop-cons>:   (:bet, :bet) -> (:bet);

	<epsilon>: () -> (:bet);

	/* TODO: <free> */

	exprs: () -> (:bet);

	list: () -> (q :bet) [

		term: () -> (q :bet) = {
			s = str;
			q = <new-str>(s);
		||
			var;
			s = str;
			q = <new-var>(s);
		};

	] = {
			a = term;

			{
				b = list;
			||
				b = <epsilon>;
			};

			q = <binop-cons>(a, b);
	};

	cmd: () -> (q :bet) = {
		q = list;
	||
		/* TODO: differentiate { ... } and ( ... ), perhaps as BET nodes */
		obrace;
		q = exprs;
		cbrace;
	||
		oparen;
		q = exprs;
		cparen;
	};

	assign-expr: () -> (q :bet) = {
		a = cmd;

		{
			equ;
			b = assign-expr;
		||
			b = <epsilon>;
		};

		q = <binop-assign>(a, b);
	};

	pipe-expr: () -> (q :bet) = {
		a = assign-expr;

		{
			pipe;
			b = pipe-expr;
		||
			b = <epsilon>;
		};

		q = <binop-pipe>(a, b);
	};

	and-expr: () -> (q :bet) = {
		a = pipe-expr;

		{
			and;
			b = and-expr;
		||
			b = <epsilon>;
		};

		q = <binop-and>(a, b);
	};

	or-expr: () -> (q :bet) = {
		a = and-expr;

		{
			or;
			b = or-expr;
		||
			b = <epsilon>;
		};

		q = <binop-or>(a, b);
	};

	exprs: () -> (q :bet) [

		expr: () -> (q :bet) = {
			a = or-expr;
			b = <epsilon>;

			{
				nl;
				q = <binop-exec>(a, b);
			||
				q = <binop-exec>(a, b);
				semi;
			||
				q = <binop-bg>(a, b);
				bg;
			};

		||
			q = <epsilon>;
			nl;
		||
			q = <epsilon>;
			semi;
		};

	] = {
		a = expr;

		{
			b = expr;
		||
			b = <epsilon>;
		};

		q = <binop-exec>(a, b);
	};

	script = {
		! = exprs;
		eof;
	};

%entry%

	script;

